{"version":3,"sources":["logo.svg","components/navigation/Navigation.js","components/photoOfDayApp/PhotoCard.js","components/homePage/HomePage.js","components/photoOfDayApp/Controls.js","components/photoOfDayApp/PhotoOfDayApp.js","components/earthDataApp/SatPicCard.js","components/earthDataApp/EarthDataApp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","props","className","style","background","height","display","justifyContent","alignItems","onClick","selectAppIndex","margin","PhotoCard","width","src","photoData","url","alt","title","explanation","copyright","HomePage","useState","photoState","setPhotosState","useEffect","fetch","then","res","json","data","console","log","Controls","marginBottom","type","onInput","event","setDate","target","value","PhotoApp","dateState","setDateState","SatPicCard","EarthDataApp","coordState","setCoordState","photosState","App","appIndex","setAppIndex","PhotoOfDayApp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAAAA,EAAOC,QAAU,IAA0B,kC,kGCa5BC,MAVf,SAAoBC,GAChB,OACI,yBAAKC,UAAU,MAAMC,MAAO,CAACC,WAAW,YAAaC,OAAO,OAAQC,QAAQ,OAAQC,eAAe,SAAUC,WAAW,WACpH,4BAAQC,QAAS,kBAAMR,EAAMS,eAAe,IAAIP,MAAO,CAACQ,OAAO,WAA/D,QACA,4BAAQF,QAAS,kBAAMR,EAAMS,eAAe,IAAIP,MAAO,CAACQ,OAAO,WAA/D,oBACA,4BAAQF,QAAS,kBAAMR,EAAMS,eAAe,IAAIP,MAAO,CAACQ,OAAO,WAA/D,4BCMGC,MAXf,SAAmBX,GACf,OACI,yBAAKC,UAAU,YAAYC,MAAO,CAACU,MAAM,MAAOF,OAAO,WACnD,yBAAKG,IAAKb,EAAMc,UAAUC,IAAKC,IAAI,aAAad,MAAO,CAACU,MAAM,UAC9D,4BAAKZ,EAAMc,UAAUG,OACrB,4BAAKjB,EAAMc,UAAUI,aACrB,mCAAMlB,EAAMc,UAAUK,aCuBnBC,MA3Bf,WAAqB,IAAD,EACmBC,mBAAS,IAD5B,mBACXC,EADW,KACCC,EADD,KAelB,OAZAC,qBAAU,WAELC,MAAM,wFACJC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZN,EAAeM,QAIpB,IAGD,6BACI,qHACA,yBAAK5B,UAAU,WAAWC,MAAO,CAACU,MAAM,MAAOF,OAAO,YAAaP,WAAW,cAC1E,iEACA,kBAAC,EAAD,CAAWW,UAAWQ,OCXnBU,MAXf,SAAkBhC,GACd,OACI,yBAAKC,UAAU,WAAWC,MAAO,CAAC+B,aAAa,SAC3C,8BACI,2BAAOC,KAAK,OAAOC,QAAS,SAAAC,GAAK,OAAIpC,EAAMqC,QAAQD,EAAME,OAAOC,aCwBjEC,MAzBf,WAAqB,IAAD,EACgBnB,mBAAS,aADzB,mBACXoB,EADW,KACAC,EADA,OAEmBrB,mBAAS,IAF5B,mBAEXC,EAFW,KAECC,EAFD,KAgBlB,OAZAC,qBAAU,WAELC,MAAM,6FAAD,OAA8FgB,IACjGf,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZN,EAAeM,QAIpB,CAACY,IAGF,yBAAKxC,UAAU,YACb,0DACA,kBAAC,EAAD,CAAUoC,QAASK,IACnB,kBAAC,EAAD,CAAW5B,UAAWQ,MCZbqB,MAXf,SAAoB3C,GAChB,OACI,yBAAKC,UAAU,aAAaC,MAAO,CAACU,MAAM,SACtC,yBAAKC,IAAKb,EAAMc,UAAUC,IAAKC,IAAI,aAAad,MAAO,CAACU,MAAM,YC6B3DgC,MA9Bf,WAAyB,IAAD,EACcvB,mBAAS,QADvB,mBACfwB,EADe,KACHC,EADG,OAEgBzB,mBAAS,IAFzB,mBAEf0B,EAFe,KAEFxB,EAFE,KAgBtB,OAZAC,qBAAU,WAENC,MAAM,oDAAD,OAAqDoB,EAArD,yGACFnB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZN,EAAeM,QAIpB,CAACgB,IAGF,yBAAK5C,UAAU,gBACb,4DAEA,6BACI,4BAAQO,QAAS,kBAAMsC,EAAcD,EAAa,MAAO3C,MAAO,CAACQ,OAAO,SAAxE,WAEJ,6BACE,kBAAC,EAAD,CAAYI,UAAWiC,OCLhBC,MAbf,WAAgB,IAAD,EACmB3B,mBAAS,GAD5B,mBACN4B,EADM,KACIC,EADJ,KAGb,OACE,yBAAKjD,UAAU,OACb,kBAAC,EAAD,CAAYQ,eAAgByC,IACb,IAAbD,GAAkB,kBAAC,EAAD,MACL,IAAbA,GAAkB,kBAACE,EAAD,MACL,IAAbF,GAAkB,kBAAC,EAAD,QCPNG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.2ac63b9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport \"../../App.css\";\n\nfunction Navigation(props){\n    return(\n        <div className='nav' style={{background:'lightgrey', height:'50px', display:'flex', justifyContent:'center', alignItems:'center'}}>\n            <button onClick={() => props.selectAppIndex(0)} style={{margin:'0 50px'}}>Home</button>\n            <button onClick={() => props.selectAppIndex(1)} style={{margin:'0 50px'}}>Photo of the Day</button>\n            <button onClick={() => props.selectAppIndex(2)} style={{margin:'0 50px'}}>Earth Satellite Viewer</button>\n        </div>\n    );\n}\n\nexport default Navigation;","import React from 'react';\nimport \"../../App.css\";\n\nfunction PhotoCard(props){\n    return(\n        <div className='photoCard' style={{width:'80%', margin:'0 auto'}}>\n            <img src={props.photoData.url} alt='nasa photo' style={{width:'100%'}} />\n            <h2>{props.photoData.title}</h2>\n            <h3>{props.photoData.explanation}</h3>\n            <p>© {props.photoData.copyright}</p>\n        </div>\n    );\n}\n\nexport default PhotoCard;","import React, {useState, useEffect} from \"react\";\nimport PhotoCard from '../photoOfDayApp/PhotoCard';\n\nimport \"../../App.css\";\n\nfunction HomePage() {\n  const [photoState, setPhotosState] = useState({});\n\n  useEffect(() =>{\n    const fetchPhotos = () =>\n       fetch(`https://api.nasa.gov/planetary/apod?api_key=H2cw3TrncbbEQ1QTS8rowEz3X0xnhhzqdQIWu15i`)\n        .then(res => res.json())\n        .then(data => {\n          console.log(data);\n          setPhotosState(data);\n        })\n        \n    fetchPhotos();\n  }, [])\n\n  return (\n    <div>\n        <h1>Welcome to Bubble Physics, a fun place to learn physics. There's not much here yet...</h1>\n        <div className=\"PhotoApp\" style={{width:'15%', margin:'0 0 0 84%', background:'lightgrey'}}>\n            <h1>NASA's Astronomy Photo of the Day</h1>\n            <PhotoCard photoData={photoState}/>\n        </div>\n    </div>\n    \n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport \"../../App.css\";\n\nfunction Controls(props){\n    return(\n        <div className='controls' style={{marginBottom:'20px'}}>\n            <form>\n                <input type='date' onInput={event => props.setDate(event.target.value)}/>\n            </form>\n            {/* <button onClick={() => console.log('search button pressed')}>Search</button> */}\n        </div>\n    );\n}\n\nexport default Controls;","import React, {useState, useEffect} from \"react\";\nimport PhotoCard from './PhotoCard';\nimport Controls from './Controls';\n\nimport \"../../App.css\";\n\nfunction PhotoApp() {\n  const [dateState, setDateState] = useState('2019-11-6');\n  const [photoState, setPhotosState] = useState({});\n\n  useEffect(() =>{\n    const fetchPhotos = () =>\n       fetch(`https://api.nasa.gov/planetary/apod?api_key=H2cw3TrncbbEQ1QTS8rowEz3X0xnhhzqdQIWu15i&date=${dateState}`)\n        .then(res => res.json())\n        .then(data => {\n          console.log(data);\n          setPhotosState(data);\n        })\n        \n    fetchPhotos();\n  }, [dateState])\n\n  return (\n    <div className=\"PhotoApp\">\n      <h1>Astronomy Photo of the Day</h1>\n      <Controls setDate={setDateState}/>\n      <PhotoCard photoData={photoState}/>\n    </div>\n  );\n}\n\nexport default PhotoApp;\n","import React from 'react';\nimport \"../../App.css\";\n\nfunction SatPicCard(props){\n    return(\n        <div className='satPicCard' style={{width:'100%'}}>\n            <img src={props.photoData.url} alt='nasa photo' style={{width:'100%'}} />\n            {/* <h2>{props.photoData.title}</h2>\n            <h3>{props.photoData.explanation}</h3>\n            <p>© {props.photoData.copyright}</p> */}\n        </div>\n    );\n}\n\nexport default SatPicCard;","import React, {useState, useEffect} from \"react\";\nimport SatPicCard from './SatPicCard';\n\nimport \"../../App.css\";\n\nfunction EarthDataApp() {\n  const [coordState, setCoordState] = useState(100.75);\n  const [photosState, setPhotosState] = useState({});\n\n  useEffect(() =>{\n    const fetchPhotos = () =>\n      fetch(`https://api.nasa.gov/planetary/earth/imagery?lon=${coordState}&lat=1.5&dim=0.050&date=2014-02-01&cloud_score=True&api_key=H2cw3TrncbbEQ1QTS8rowEz3X0xnhhzqdQIWu15i`)\n        .then(res => res.json())\n        .then(data => {\n          console.log(data);\n          setPhotosState(data);\n        })\n        \n    fetchPhotos();\n  }, [coordState])\n\n  return (\n    <div className=\"EarthDataApp\">\n      <h1>Earth Satellite Image Viewer</h1>\n      {/* <Controls setDate={setDateState}/> */}\n      <div>\n          <button onClick={() => setCoordState(coordState + 0.02)} style={{margin:\"30px\"}}>--></button>\n      </div>\n      <div>\n        <SatPicCard photoData={photosState}/>\n      </div>\n    </div>\n  );\n}\n\nexport default EarthDataApp;\n","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport Navigation from './components/navigation/Navigation';\nimport HomePage from './components/homePage/HomePage';\n\nimport PhotoOfDayApp from './components/photoOfDayApp/PhotoOfDayApp';\nimport EarthDataApp from './components/earthDataApp/EarthDataApp';\n\n\nimport './App.css';\n\nfunction App() {\n  const [appIndex, setAppIndex] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <Navigation selectAppIndex={setAppIndex}/>\n      {(appIndex === 0 && <HomePage />)}\n      {(appIndex === 1 && <PhotoOfDayApp />)}\n      {(appIndex === 2 && <EarthDataApp />)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}